# frozen_string_literal: true

module RailsOpenapiGen
  class Configuration
    attr_accessor :openapi_version, :info, :servers, :route_patterns, :output

    # Initializes configuration with default values
    def initialize
      @openapi_version = "3.0.0"
      @info = {
        title: default_app_name,
        version: "1.0.0",
        description: "API documentation generated by rails-openapi-gen"
      }
      @servers = [
        {
          url: "http://localhost:3000",
          description: "Development server"
        }
      ]
      @route_patterns = {
        include: [/.*/], # Include all routes by default
        exclude: []      # Exclude nothing by default
      }
      @output = {
        directory: "openapi",
        filename: "openapi.yaml",
        split_files: true
      }
    end

    # TODO: Loads configuration from Ruby file
    # @param file_path [String, nil] Path to configuration file (defaults to config/openapi.rb or config/initializers/openapi.rb)
    # @return [void]
    def load_from_file(file_path = nil)
      # TODO: Implement configuration loading from file
      # This method should load configuration from Ruby files and apply it to the instance
      return
    end

    # Returns the full path to the output directory
    # @return [String] Full output directory path
    def output_directory
      if @output[:directory].start_with?('/')
        @output[:directory]
      else
        File.join(Rails.root.to_s, @output[:directory])
      end
    end

    # Returns the output filename
    # @return [String] Output filename
    def output_filename
      @output[:filename]
    end

    # Checks if output should be split into multiple files
    # @return [Boolean] True if files should be split
    def split_files?
      @output[:split_files]
    end

    # Updates output configuration
    # @param output_config [Hash] Output configuration hash
    # @return [void]
    def update_output_config(output_config)
      load_output_config(output_config)
    end

    # Checks if a route path should be included in the OpenAPI spec
    # @param path [String] Route path to check
    # @return [Boolean] True if route should be included
    def route_included?(path)
      # Check if path matches any include pattern
      included = @route_patterns[:include].any? { |pattern| path.match?(pattern) }
      return false unless included

      # Check if path matches any exclude pattern
      excluded = @route_patterns[:exclude].any? { |pattern| path.match?(pattern) }
      !excluded
    end

    private

    # Loads Ruby configuration file
    # @param file_path [String] Path to configuration file
    # @return [void]
    def load_ruby_config(file_path)
      # Load Ruby configuration file
      # The file should call RailsOpenapiGen.configure block
      load file_path
      
      # Copy configuration from global singleton to this instance
      global_config = RailsOpenapiGen.configuration
      @openapi_version = global_config.openapi_version
      @info = global_config.info.dup
      @servers = global_config.servers.dup
      @route_patterns = global_config.route_patterns.dup
      @output = global_config.output.dup
    end

    # Returns default application name
    # @return [String] Default app name
    def default_app_name
      if defined?(Rails) && Rails.application
        Rails.application.class.respond_to?(:module_parent_name) ? 
          Rails.application.class.module_parent_name : 
          "RailsApp"
      else
        "API"
      end
    end

    # Converts hash keys to symbols
    # @param hash [Hash] Hash to convert
    # @return [Hash] Hash with symbolized keys
    def symbolize_keys(hash)
      return hash unless hash.is_a?(Hash)
      hash.transform_keys(&:to_sym)
    end


    # Loads output configuration settings
    # @param output_config [Hash] Output configuration hash
    # @return [void]
    def load_output_config(output_config)
      output_settings = symbolize_keys(output_config)
      
      @output[:directory] = output_settings[:directory] if output_settings[:directory]
      @output[:filename] = output_settings[:filename] if output_settings[:filename]
      @output[:split_files] = output_settings[:split_files] if output_settings.key?(:split_files)
    end
  end

  class << self
    attr_writer :configuration

    # Returns the configuration instance
    # @return [Configuration] Configuration instance
    def configuration
      @configuration ||= Configuration.new
    end

    # Configures the gem via block
    # @yield [Configuration] Configuration instance
    # @return [void]
    def configure
      yield(configuration)
    end

    # Resets configuration to defaults
    # @return [void]
    def reset_configuration!
      @configuration = Configuration.new
    end
  end
end